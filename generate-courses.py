import json

# Complete course configuration
courses_data = {
    "courses": {
        "dsa": {
            "name": "Data Structures & Algorithms",
            "icon": "üßÆ",
            "levels": []
        },
        "os": {
            "name": "Operating Systems", 
            "icon": "üíª",
            "levels": []
        }
    }
}

# DSA Levels 1-20
dsa_levels = [
    # Level 1-4: Regular levels with quiz
    {"id": 1, "title": "Introduction to DSA", "description": "Learn fundamentals", "icon": "üìö", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "What are Data Structures?", "content": "Data structures organize and store data efficiently.", "example": "const arr = [1, 2, 3];"}], "quiz": {"questions": [{"question": "Which uses LIFO?", "options": ["Queue", "Stack", "Array", "Tree"], "correct": 1}, {"question": "Array access time?", "options": ["O(n)", "O(log n)", "O(1)", "O(n¬≤)"], "correct": 2}, {"question": "Best for recursion?", "options": ["Queue", "Array", "Stack", "List"], "correct": 2}, {"question": "FIFO stands for?", "options": ["First In First Out", "Fast In Fast Out", "First Input Output", "Final In Out"], "correct": 0}, {"question": "Non-linear structure?", "options": ["Array", "Stack", "Queue", "Tree"], "correct": 3}]}},
    {"id": 2, "title": "Arrays", "description": "Master arrays", "icon": "üìä", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Arrays", "content": "Contiguous memory storage.", "example": "arr[0] // O(1)"}], "quiz": {"questions": [{"question": "Array space?", "options": ["O(1)", "O(log n)", "O(n)", "O(n¬≤)"], "correct": 2}, {"question": "Fastest operation?", "options": ["Insert start", "Delete start", "Access index", "Search"], "correct": 2}, {"question": "Index starts?", "options": ["1", "0", "-1", "Depends"], "correct": 1}, {"question": "String concat loop?", "options": ["O(1)", "O(n)", "O(n¬≤)", "O(log n)"], "correct": 2}, {"question": "Arrays are?", "options": ["Dynamic", "Fixed", "Both", "Neither"], "correct": 1}]}},
    {"id": 3, "title": "Linked Lists", "description": "Learn linked lists", "icon": "üîó", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Linked Lists", "content": "Nodes with data and next pointer.", "example": "class Node { data; next; }"}], "quiz": {"questions": [{"question": "Insert at start time?", "options": ["O(1)", "O(n)", "O(log n)", "O(n¬≤)"], "correct": 0}, {"question": "Advantage over array?", "options": ["Fast access", "Dynamic size", "Less memory", "Sorted"], "correct": 1}, {"question": "Doubly linked has?", "options": ["One pointer", "Two pointers", "Three pointers", "No pointers"], "correct": 1}, {"question": "Space complexity?", "options": ["O(1)", "O(log n)", "O(n)", "O(n¬≤)"], "correct": 2}, {"question": "Slower than array?", "options": ["Insert", "Delete", "Access index", "All equal"], "correct": 2}]}},
    {"id": 4, "title": "Stacks & Queues", "description": "Master both", "icon": "üìö", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Stack & Queue", "content": "LIFO and FIFO principles.", "example": "stack.push(); queue.enqueue();"}], "quiz": {"questions": [{"question": "Function calls use?", "options": ["Queue", "Stack", "Array", "Tree"], "correct": 1}, {"question": "Queue adds at?", "options": ["Front", "Rear", "Middle", "Random"], "correct": 1}, {"question": "Push time?", "options": ["O(1)", "O(n)", "O(log n)", "O(n¬≤)"], "correct": 0}, {"question": "FIFO is?", "options": ["Stack", "Queue", "Tree", "Graph"], "correct": 1}, {"question": "Overflow when?", "options": ["Pop empty", "Push full", "Both", "Neither"], "correct": 1}]}},
    # Level 5: Milestone with game and coding
    {"id": 5, "title": "Stack & Queue Challenge", "description": "Game and coding", "icon": "üéÆ", "xp": 200, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Applications", "content": "Expression eval, BFS, Scheduling.", "example": "// Stack: parentheses\n// Queue: BFS"}], "game": "stack-queue-game", "gameManual": "üéÆ Stack/Queue Game: Predict outputs of operations!", "coding": {"title": "Implement Stack", "description": "Create Stack class", "starterCode": "class Stack {\n  // Your code\n}"}},
    # Levels 6-9
    {"id": 6, "title": "Trees", "description": "Learn trees", "icon": "üå≥", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Trees", "content": "Hierarchical structure.", "example": "class TreeNode { val; left; right; }"}], "quiz": {"questions": [{"question": "Max nodes at level L?", "options": ["L", "2^L", "2L", "L¬≤"], "correct": 1}, {"question": "n nodes, edges?", "options": ["n", "n-1", "n+1", "2n"], "correct": 1}, {"question": "Leaf node?", "options": ["Root", "No children", "One child", "Any"], "correct": 1}, {"question": "Height of 1 node?", "options": ["0", "1", "-1", "undefined"], "correct": 0}, {"question": "Binary max children?", "options": ["1", "2", "3", "Unlimited"], "correct": 1}]}},
    {"id": 7, "title": "Traversals", "description": "Master traversals", "icon": "üîÑ", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Traversals", "content": "Inorder, Preorder, Postorder, Level.", "example": "// Inorder: L-Root-R"}], "quiz": {"questions": [{"question": "BST inorder gives?", "options": ["Random", "Sorted", "Reverse", "Level"], "correct": 1}, {"question": "Root first?", "options": ["Inorder", "Postorder", "Preorder", "Level"], "correct": 2}, {"question": "Postorder for?", "options": ["Search", "Delete tree", "Insert", "Sort"], "correct": 1}, {"question": "Level order uses?", "options": ["Stack", "Queue", "Array", "Tree"], "correct": 1}, {"question": "Traversal time?", "options": ["O(1)", "O(log n)", "O(n)", "O(n¬≤)"], "correct": 2}]}},
    {"id": 8, "title": "BST", "description": "Binary Search Trees", "icon": "üîç", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "BST", "content": "Left < Root < Right.", "example": "// Search: O(log n)"}], "quiz": {"questions": [{"question": "Left child?", "options": ["Greater", "Less", "Equal", "No relation"], "correct": 1}, {"question": "Best search?", "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"], "correct": 1}, {"question": "Worst case?", "options": ["Balanced", "Linked list", "Complete", "Full"], "correct": 1}, {"question": "Inorder gives?", "options": ["Unsorted", "Sorted asc", "Sorted desc", "Random"], "correct": 1}, {"question": "Find min?", "options": ["Root", "Leftmost", "Rightmost", "Leaf"], "correct": 1}]}},
    {"id": 9, "title": "AVL Trees", "description": "Self-balancing", "icon": "‚öñÔ∏è", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "AVL", "content": "Balance factor: -1, 0, 1.", "example": "// Rotations: LL, RR, LR, RL"}], "quiz": {"questions": [{"question": "Balance factor?", "options": ["0 to 2", "-1 to 1", "-2 to 2", "0 to 1"], "correct": 1}, {"question": "Search time?", "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"], "correct": 1}, {"question": "Rotation types?", "options": ["2", "3", "4", "5"], "correct": 2}, {"question": "AVL stands?", "options": ["Adelson-Velsky-Landis", "Advanced Very Large", "Array Vector List", "None"], "correct": 0}, {"question": "LL rotation?", "options": ["Left-Left", "Right-Right", "Left-Right", "Right-Left"], "correct": 0}]}},
    # Level 10: Milestone
    {"id": 10, "title": "Tree Challenge", "description": "Game and coding", "icon": "üéÆ", "xp": 200, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Tree Apps", "content": "File systems, DOM, Databases.", "example": "// Real uses"}], "game": "tree-game", "gameManual": "üéÆ Tree Game: Traverse trees correctly!", "coding": {"title": "Tree Traversals", "description": "Implement traversals", "starterCode": "function inorder(root) {\n  // Code\n}"}},
    # Levels 11-14
    {"id": 11, "title": "Graphs", "description": "Graph basics", "icon": "üï∏Ô∏è", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Graphs", "content": "Vertices and edges.", "example": "const graph = {0: [1,2]};"}], "quiz": {"questions": [{"question": "No cycles?", "options": ["Complete", "Tree", "Cyclic", "Directed"], "correct": 1}, {"question": "Matrix space?", "options": ["O(V)", "O(E)", "O(V¬≤)", "O(V+E)"], "correct": 2}, {"question": "Sparse graphs?", "options": ["Matrix", "List", "Equal", "Neither"], "correct": 1}, {"question": "Directed called?", "options": ["Digraph", "Tree", "Network", "Web"], "correct": 0}, {"question": "Max edges?", "options": ["V", "V-1", "V(V-1)/2", "V¬≤"], "correct": 2}]}},
    {"id": 12, "title": "BFS & DFS", "description": "Graph traversals", "icon": "üîç", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "BFS/DFS", "content": "Breadth-first and Depth-first.", "example": "// BFS: Queue, DFS: Stack"}], "quiz": {"questions": [{"question": "BFS uses?", "options": ["Stack", "Queue", "Tree", "Array"], "correct": 1}, {"question": "DFS uses?", "options": ["Queue only", "Stack/Recursion", "Array", "Tree"], "correct": 1}, {"question": "Time complexity?", "options": ["O(V)", "O(E)", "O(V+E)", "O(VE)"], "correct": 2}, {"question": "Shortest path?", "options": ["DFS", "BFS", "Both", "Neither"], "correct": 1}, {"question": "BFS space?", "options": ["O(1)", "O(V)", "O(E)", "O(V+E)"], "correct": 1}]}},
    {"id": 13, "title": "Dijkstra", "description": "Shortest path", "icon": "üõ£Ô∏è", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Dijkstra", "content": "Shortest path algorithm.", "example": "// Priority queue"}], "quiz": {"questions": [{"question": "Works on?", "options": ["Negative", "Positive", "Both", "Neither"], "correct": 1}, {"question": "Uses?", "options": ["BFS", "DFS", "Priority Queue", "Stack"], "correct": 2}, {"question": "Negative weights?", "options": ["Dijkstra", "Bellman-Ford", "BFS", "DFS"], "correct": 1}, {"question": "Type?", "options": ["Greedy", "DP", "Backtrack", "D&C"], "correct": 0}, {"question": "Time with heap?", "options": ["O(V¬≤)", "O(E log V)", "O(V+E)", "O(VE)"], "correct": 1}]}},
    {"id": 14, "title": "MST", "description": "Spanning trees", "icon": "üå≤", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "MST", "content": "Prim's and Kruskal's.", "example": "// Min cost tree"}], "quiz": {"questions": [{"question": "MST edges?", "options": ["V", "V-1", "V+1", "2V"], "correct": 1}, {"question": "Kruskal uses?", "options": ["PQ", "Union-Find", "Stack", "Queue"], "correct": 1}, {"question": "Prim starts?", "options": ["Edge", "Vertex", "Both", "Neither"], "correct": 1}, {"question": "Used in?", "options": ["Network design", "Sort", "Search", "Hash"], "correct": 0}, {"question": "Dense graphs?", "options": ["Prim", "Kruskal", "Equal", "Neither"], "correct": 0}]}},
    # Level 15: Milestone
    {"id": 15, "title": "Graph Challenge", "description": "Game and coding", "icon": "üéÆ", "xp": 200, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Graph Apps", "content": "Maps, Social networks.", "example": "// Google Maps"}], "game": "graph-game", "gameManual": "üéÆ Graph Game: Find paths and build MST!", "coding": {"title": "BFS/DFS", "description": "Implement both", "starterCode": "function bfs(graph, start) {\n  // Code\n}"}},
    # Levels 16-19
    {"id": 16, "title": "Hashing", "description": "Hash tables", "icon": "üîê", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Hashing", "content": "O(1) operations.", "example": "// key % size"}], "quiz": {"questions": [{"question": "Average search?", "options": ["O(1)", "O(n)", "O(log n)", "O(n¬≤)"], "correct": 0}, {"question": "Collision when?", "options": ["Full", "Same hash", "Different keys", "Empty"], "correct": 1}, {"question": "Chaining uses?", "options": ["Array", "Linked list", "Tree", "Stack"], "correct": 1}, {"question": "Load factor?", "options": ["n/m", "m/n", "n*m", "n+m"], "correct": 0}, {"question": "Good hash?", "options": ["Min collisions", "Max collisions", "Complex", "Simple"], "correct": 0}]}},
    {"id": 17, "title": "Heaps", "description": "Priority queues", "icon": "‚õ∞Ô∏è", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Heaps", "content": "Max/Min heap properties.", "example": "// Parent >= children"}], "quiz": {"questions": [{"question": "Max heap root?", "options": ["Min", "Max", "Random", "Avg"], "correct": 1}, {"question": "Implemented using?", "options": ["List", "Array", "Stack", "Queue"], "correct": 1}, {"question": "Parent at i?", "options": ["i/2", "(i-1)/2", "2i", "2i+1"], "correct": 1}, {"question": "Heap sort time?", "options": ["O(n)", "O(n log n)", "O(n¬≤)", "O(log n)"], "correct": 1}, {"question": "Priority queue?", "options": ["Stack", "Queue", "Heap", "Array"], "correct": 2}]}},
    {"id": 18, "title": "Dynamic Programming", "description": "DP technique", "icon": "üí°", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "DP", "content": "Optimal substructure + overlapping.", "example": "// Memoization"}], "quiz": {"questions": [{"question": "DP requires?", "options": ["Greedy", "Optimal substructure", "Backtrack", "Random"], "correct": 1}, {"question": "Memoization?", "options": ["Top-down", "Bottom-up", "Greedy", "D&C"], "correct": 0}, {"question": "Tabulation?", "options": ["Top-down", "Bottom-up", "Recursive", "Iterative"], "correct": 1}, {"question": "DP trades?", "options": ["Time for space", "Space for time", "Both", "Neither"], "correct": 1}, {"question": "Classic DP?", "options": ["Binary search", "Merge sort", "Knapsack", "Quick sort"], "correct": 2}]}},
    {"id": 19, "title": "Greedy", "description": "Greedy algorithms", "icon": "üéØ", "xp": 100, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Greedy", "content": "Local optimal choices.", "example": "// Activity selection"}], "quiz": {"questions": [{"question": "Greedy gives?", "options": ["Always optimal", "Good solution", "May not optimal", "Wrong"], "correct": 2}, {"question": "Used in?", "options": ["Dijkstra", "Merge sort", "Binary search", "DFS"], "correct": 0}, {"question": "Greedy vs DP?", "options": ["Same", "Different", "DP better", "Greedy better"], "correct": 1}, {"question": "Activity selection?", "options": ["DP", "Greedy", "Backtrack", "D&C"], "correct": 1}, {"question": "Huffman coding?", "options": ["DP", "Greedy", "Backtrack", "D&C"], "correct": 1}]}},
    # Level 20: Final boss
    {"id": 20, "title": "DSA Mastery", "description": "Final challenge", "icon": "üèÜ", "xp": 300, "videoUrl": "https://www.youtube.com/watch?v=8hly31xKli0", "concepts": [{"title": "Review", "content": "All DSA concepts mastered!", "example": "// Congratulations!"}], "game": "dsa-final", "gameManual": "üéÆ Final Challenge: Solve complex DSA problems!", "coding": {"title": "Complex Problem", "description": "Solve advanced problem", "starterCode": "// Solve the challenge\n"}}
]

# Add remaining levels 6-20 for DSA
courses_data["courses"]["dsa"]["levels"] = dsa_levels

# OS Levels (similar structure)
os_levels = [
    {"id": i, "title": f"OS Level {i}", "description": f"Learn OS concept {i}", "icon": "üíª", "xp": 200 if i % 5 == 0 else 100, "videoUrl": "https://www.youtube.com/watch?v=26QPDBe-NB8", "concepts": [{"title": f"Concept {i}", "content": f"OS concept {i} content", "example": "// Example"}], "quiz": {"questions": [{"question": f"Q{j}?", "options": ["A", "B", "C", "D"], "correct": 0} for j in range(1, 6)]} if i % 5 != 0 else None, "game": f"os-game-{i}" if i % 5 == 0 else None, "gameManual": f"üéÆ OS Game {i}" if i % 5 == 0 else None, "coding": {"title": f"OS Coding {i}", "description": "Code challenge", "starterCode": "// Code"} if i % 5 == 0 else None} 
    for i in range(1, 21)
]

courses_data["courses"]["os"]["levels"] = os_levels

# Write to file
with open('data/dsa-courses-config.json', 'w') as f:
    json.dump(courses_data, f, indent=2)

print("‚úÖ courses-config.json generated successfully!")
